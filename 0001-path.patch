From e3266a9966bb2b0aebc1be49f8e072696e4b28c0 Mon Sep 17 00:00:00 2001
From: changhui <changhui@imdada.cn>
Date: Fri, 24 Apr 2020 15:36:23 +0800
Subject: [PATCH] path

---
 lib/inspectors/res.js | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/lib/inspectors/res.js b/lib/inspectors/res.js
index 2e8763ec..d58eb7d0 100644
--- a/lib/inspectors/res.js
+++ b/lib/inspectors/res.js
@@ -7,6 +7,7 @@ var extend = require('extend');
 var util = require('../util');
 var Transform = require('pipestream').Transform;
 var h2 = require('../https/h2');
+var ws = require('ws');
 
 var WhistleTransform = util.WhistleTransform;
 var SpeedTransform = util.SpeedTransform;
@@ -32,6 +33,21 @@ var BODY_PROTOCOLS = ['attachment', 'resReplace', 'resBody', 'resPrepend', 'resA
   'cssBody', 'cssPrepend', 'cssAppend', 'resWrite', 'resWriteRaw', 'resMerge'];
 var BODY_PROTOCOLS_LEN = BODY_PROTOCOLS.length;
 
+const boardcastPort = process.env.LIGHTPROXY_BOARDCASR_PORT;
+
+console.log('Whistle get boardcast port', boardcastPort);
+
+const wsClient = new ws(`ws://127.0.0.1:${boardcastPort}`);
+const clientReady = new Promise(resolve => {
+  wsClient.onopen = () => {
+    resolve();
+  };
+});
+
+wsClient.onerror = err => {
+  console.error(err);
+};
+
 function notAllowCache(resRules) {
   for (var i = 0; i < BODY_PROTOCOLS_LEN; i++) {
     if (resRules[BODY_PROTOCOLS[i]]) {
@@ -854,6 +870,23 @@ module.exports = function(req, res, next) {
                   if (req.filter.showHost || req.enable.showHost) {
                     _res.headers['x-host-ip'] = req.hostIp || LOCALHOST;
                   }
+                  const ruleRaw = req.rules && req.rules.rule && req.rules.rule.raw;
+                  _res.headers['__lightproxy-host-ip__'] = req.hostIp || LOCALHOST;
+                  _res.headers['__lightproxy-rules__'] = JSON.stringify(ruleRaw) || 'none';
+                  _res.headers['__lightproxy-real-url__'] = req.realUrl;
+                  _res.headers['__lightproxy-help__'] = 'See https://github.com/alibaba/lightproxy';
+                  clientReady.then(() => {
+                    wsClient.send(
+                      'whistle-hit'.padEnd(50, ' ') + JSON.stringify({
+                        method: 'match-rule',
+                        rule: ruleRaw,
+                        hostip: req.hostIp,
+                        realUrl: req.realUrl,
+                        host: req.get('host')
+                      })
+                    )
+                  })
+
                   util.setResponseFor(resRules, _res.headers, req, req.hostIp);
                   pluginMgr.postStats(req, res);
                   try {
-- 
2.23.0

